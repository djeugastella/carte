{"ast":null,"code":"var _jsxFileName = \"/home/kenneth/Bureau/carte-projet/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport carte from './carte.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [cities, setCities] = useState([]);\n  const [hoveredCity, setHoveredCity] = useState(null);\n  const handleMapClick = async event => {\n    const rect = event.target.getBoundingClientRect();\n    const x = (event.clientX - rect.left) / rect.width;\n    const y = (event.clientY - rect.top) / rect.height;\n    console.log('Clicked at:', x, y);\n    try {\n      const response = await axios.get(`http://localhost:8080/citys?x=${x}&y=${y}`);\n      const citiesData = response.data;\n      setCities(citiesData);\n      console.log('Villes récupérées:', citiesData);\n    } catch (error) {\n      console.error('Erreur lors de la récupération des villes:', error);\n    }\n  };\n  const handleCityHover = city => {\n    setHoveredCity(city);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: carte,\n        alt: \"Carte de la France\",\n        onClick: handleMapClick,\n        useMap: \"#cities\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"map\", {\n        name: \"cities\",\n        children: cities.map(city => /*#__PURE__*/_jsxDEV(\"area\", {\n          shape: \"circle\",\n          coords: `${city.x},${city.y},10`,\n          onMouseOver: () => handleCityHover(city),\n          onMouseOut: () => handleCityHover(null)\n        }, city.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), hoveredCity && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"city-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: hoveredCity.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this), hoveredCity.distance == undefined && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Distance: \", hoveredCity.distance.toFixed(2), \" km\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 53\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Liste des Villes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: cities.map(city => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [city.name, \" [\", city.distance.toFixed(2), \" km]\"]\n        }, city.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"5F8dmruB9j7HPdoqdoWvBCc+kGE=\");\n_c = App;\nexport default App;\n\n/*import React, { useRef, useEffect , useState} from \"react\";\n//import React, { useState } from 'react';\nimport axios from 'axios';\n//import Map from './components/Map';\n//import CityList from './components/CityList';\n//import ParametersForm from './components/ParametersForm';\nimport carte from './carte.png';\n\nfunction App() {\n // const carteRef = useRef(null);\n\n  const [cities, setCities] = useState([]);\n //const [selectedCity, setSelectedCity] = useState(null);\n  //const [maxCities, setMaxCities] = useState(10);\n  //const [maxDistance, setMaxDistance] = useState(50);\n  //const [minPopulation, setMinPopulation] = useState(10000);\n\n  const fetchData = async (x, y) => {\n    try {\n      const response = await axios.get(`http://localhost:8080/citys?x=${x}&y=${y}`);\n      setCities(response.data);\n    } catch (error) {\n      console.error(\"Error fetching cities:\", error);\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    // Traitement des paramètres du formulaire ici\n  };\n\n  return (\n    <div>\n      <img  src={carte} alt=\"Carte\"/>\n    </div>\n\n  /*return (\n    <div className=\"App\">\n      <h1>Carte de France interactive</h1>\n      <div className=\"content\">\n        <Map carte={carte} fetchData={fetchData} setSelectedCity={setSelectedCity} />\n        <CityList cities={cities} selectedCity={selectedCity} />\n      </div>\n      <ParametersForm\n        maxCities={maxCities}\n        maxDistance={maxDistance}\n        minPopulation={minPopulation}\n        setMaxCities={setMaxCities}\n        setMaxDistance={setMaxDistance}\n        setMinPopulation={setMinPopulation}\n        handleSubmit={handleSubmit}\n      />\n    </div>\n  );*/\n\n//export default App;\n\n/*import React, { useRef, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Map from \"./components/Map\"; // Composant de la carte\nimport CityList from \"./components/CityList\"; // Composant de la liste des villes\nimport ParametersForm from \"./components/ParametersForm\"; // Composant du formulaire de paramètres\nimport \"./App.css\";\nimport carte from \"./carte.png\";\n\nfunction App() {\n  const carteRef = useRef(null);\n  const [cities, setCities] = useState([]);\n  const [selectedCity, setSelectedCity] = useState(null);\n  \n  useEffect(() => {\n    const fetchData = async (event) => {\n      if (!carteRef.current) return; // Vérifie si la référence de l'image est définie\n\n      const rect = carteRef.current.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      \n      try {\n        const response = await axios.get(`http://localhost:8080/citys?x=${x}&y=${y}`);\n        setCities(response.data);\n      } catch (error) {\n        console.error(\"Error fetching cities:\", error);\n      }\n    };\n\n    if(carteRef.current){ // Ajoute l'écouteur d'événement uniquement si la référence de l'image est définie\n      carteRef.current.addEventListener(\"click\", fetchData);\n    }\n\n    return () => {\n      if(carteRef.current){\n        carteRef.current.removeEventListener(\"click\", fetchData)\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Carte de France interactive</h1>\n      <div className=\"content\">\n       \n        <Map cities={cities} setSelectedCity={setSelectedCity} />\n        <CityList cities={cities} selectedCity={selectedCity} />\n      </div>\n      <ParametersForm />\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n\n/*import \"./App.css\";\nimport React, { useRef, useEffect } from \"react\";\nimport carte from \"./carte.png\";\nimport axios from \"axios\";\n\nfunction App() {\n  const carteRef = useRef(null);\n\n  useEffect(() => {\n\n    const fetchData = async (event) => {\n      // Récupérer les coordonnées du point cliqué\n      const rect = carteRef.current.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n\n    // Fonction pour récupérer les dimensions de la carte\n    /*onst getDimensions = () => {\n      const rect = carteRef.current.getBoundingClientRect();\n      console.log(\"Largeur de la carte :\", rect.width);\n      console.log(\"Hauteur de la carte :\", rect.height);\n    };\n\n    //const fetchData = async () => {\n      // Effectuer une requête vers l'API avec les coordonnées du point cliqué\n      const response = await axios.get(\"http://localhost:8080/citys\");\n      console.log(response.data);\n      \n    };\n\n    const convertCoordinates = () => {\n      // Vos calculs de conversion ici\n      console.log(\"Latitude convertie : ...\");\n      console.log(\"Longitude convertie : ...\");\n    };\n\n\n    //getDimensions();\n    // Ajouter un écouteur de clic sur la carte\n    carteRef.current.addEventListener(\"click\", fetchData);\n\n    convertCoordinates();\n\n    return ()=>{\n      carteRef.current.removeEventListener(\"click\",fetchData);\n    \n    };\n  }, []);\n\n  return (\n    <div>\n      <img ref={carteRef} src={carte} alt=\"Carte\"/>\n    </div>\n  );\n}\n\nexport default App;\n*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","carte","jsxDEV","_jsxDEV","App","_s","cities","setCities","hoveredCity","setHoveredCity","handleMapClick","event","rect","target","getBoundingClientRect","x","clientX","left","width","y","clientY","top","height","console","log","response","get","citiesData","data","error","handleCityHover","city","className","children","src","alt","onClick","useMap","fileName","_jsxFileName","lineNumber","columnNumber","name","map","shape","coords","onMouseOver","onMouseOut","id","distance","undefined","toFixed","_c","$RefreshReg$"],"sources":["/home/kenneth/Bureau/carte-projet/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport carte from './carte.png';\n\nfunction App() {\n  const [cities, setCities] = useState([]);\n  const [hoveredCity, setHoveredCity] = useState(null);\n\n  const handleMapClick = async (event) => {\n    const rect = event.target.getBoundingClientRect();\n    const x = (event.clientX - rect.left) / rect.width;\n    const y = (event.clientY - rect.top) / rect.height;\n    console.log('Clicked at:', x, y);\n\n    try {\n      const response = await axios.get(`http://localhost:8080/citys?x=${x}&y=${y}`);\n      const citiesData = response.data;\n      setCities(citiesData);\n      console.log('Villes récupérées:', citiesData);\n    } catch (error) {\n      console.error('Erreur lors de la récupération des villes:', error);\n    }\n  };\n\n  const handleCityHover = (city) => {\n    setHoveredCity(city);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"map-container\">\n        <img src={carte} alt=\"Carte de la France\" onClick={handleMapClick} useMap=\"#cities\" />\n        <map name=\"cities\">\n          {cities.map(city => (\n            <area\n              key={city.id}\n              shape=\"circle\"\n              coords={`${city.x},${city.y},10`}\n              onMouseOver={() => handleCityHover(city)}\n              onMouseOut={() => handleCityHover(null)}\n            />\n          ))}\n        </map>\n        {hoveredCity && (\n          <div className=\"city-details\">\n            <h2>{hoveredCity.name}</h2>\n            {hoveredCity.distance == undefined && ( <p>Distance: {hoveredCity.distance.toFixed(2)} km</p>)}\n          </div>\n        )}\n      </div>\n      <div className=\"sidebar\">\n        <h3>Liste des Villes</h3>\n        <ul>\n          {cities.map(city => (\n            <li key={city.id}>{city.name} [{city.distance.toFixed(2)} km]</li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*import React, { useRef, useEffect , useState} from \"react\";\n//import React, { useState } from 'react';\nimport axios from 'axios';\n//import Map from './components/Map';\n//import CityList from './components/CityList';\n//import ParametersForm from './components/ParametersForm';\nimport carte from './carte.png';\n\nfunction App() {\n // const carteRef = useRef(null);\n\n  const [cities, setCities] = useState([]);\n //const [selectedCity, setSelectedCity] = useState(null);\n  //const [maxCities, setMaxCities] = useState(10);\n  //const [maxDistance, setMaxDistance] = useState(50);\n  //const [minPopulation, setMinPopulation] = useState(10000);\n\n  const fetchData = async (x, y) => {\n    try {\n      const response = await axios.get(`http://localhost:8080/citys?x=${x}&y=${y}`);\n      setCities(response.data);\n    } catch (error) {\n      console.error(\"Error fetching cities:\", error);\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    // Traitement des paramètres du formulaire ici\n  };\n\n  return (\n    <div>\n      <img  src={carte} alt=\"Carte\"/>\n    </div>\n\n  /*return (\n    <div className=\"App\">\n      <h1>Carte de France interactive</h1>\n      <div className=\"content\">\n        <Map carte={carte} fetchData={fetchData} setSelectedCity={setSelectedCity} />\n        <CityList cities={cities} selectedCity={selectedCity} />\n      </div>\n      <ParametersForm\n        maxCities={maxCities}\n        maxDistance={maxDistance}\n        minPopulation={minPopulation}\n        setMaxCities={setMaxCities}\n        setMaxDistance={setMaxDistance}\n        setMinPopulation={setMinPopulation}\n        handleSubmit={handleSubmit}\n      />\n    </div>\n  );*/\n  \n\n\n//export default App;\n\n\n\n/*import React, { useRef, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Map from \"./components/Map\"; // Composant de la carte\nimport CityList from \"./components/CityList\"; // Composant de la liste des villes\nimport ParametersForm from \"./components/ParametersForm\"; // Composant du formulaire de paramètres\nimport \"./App.css\";\nimport carte from \"./carte.png\";\n\nfunction App() {\n  const carteRef = useRef(null);\n  const [cities, setCities] = useState([]);\n  const [selectedCity, setSelectedCity] = useState(null);\n  \n  useEffect(() => {\n    const fetchData = async (event) => {\n      if (!carteRef.current) return; // Vérifie si la référence de l'image est définie\n\n      const rect = carteRef.current.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      \n      try {\n        const response = await axios.get(`http://localhost:8080/citys?x=${x}&y=${y}`);\n        setCities(response.data);\n      } catch (error) {\n        console.error(\"Error fetching cities:\", error);\n      }\n    };\n\n    if(carteRef.current){ // Ajoute l'écouteur d'événement uniquement si la référence de l'image est définie\n      carteRef.current.addEventListener(\"click\", fetchData);\n    }\n\n    return () => {\n      if(carteRef.current){\n        carteRef.current.removeEventListener(\"click\", fetchData)\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Carte de France interactive</h1>\n      <div className=\"content\">\n       \n        <Map cities={cities} setSelectedCity={setSelectedCity} />\n        <CityList cities={cities} selectedCity={selectedCity} />\n      </div>\n      <ParametersForm />\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n\n/*import \"./App.css\";\nimport React, { useRef, useEffect } from \"react\";\nimport carte from \"./carte.png\";\nimport axios from \"axios\";\n\nfunction App() {\n  const carteRef = useRef(null);\n\n  useEffect(() => {\n\n    const fetchData = async (event) => {\n      // Récupérer les coordonnées du point cliqué\n      const rect = carteRef.current.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n\n    // Fonction pour récupérer les dimensions de la carte\n    /*onst getDimensions = () => {\n      const rect = carteRef.current.getBoundingClientRect();\n      console.log(\"Largeur de la carte :\", rect.width);\n      console.log(\"Hauteur de la carte :\", rect.height);\n    };\n\n    //const fetchData = async () => {\n      // Effectuer une requête vers l'API avec les coordonnées du point cliqué\n      const response = await axios.get(\"http://localhost:8080/citys\");\n      console.log(response.data);\n      \n    };\n\n    const convertCoordinates = () => {\n      // Vos calculs de conversion ici\n      console.log(\"Latitude convertie : ...\");\n      console.log(\"Longitude convertie : ...\");\n    };\n\n\n    //getDimensions();\n    // Ajouter un écouteur de clic sur la carte\n    carteRef.current.addEventListener(\"click\", fetchData);\n\n    convertCoordinates();\n\n    return ()=>{\n      carteRef.current.removeEventListener(\"click\",fetchData);\n    \n    };\n  }, []);\n\n  return (\n    <div>\n      <img ref={carteRef} src={carte} alt=\"Carte\"/>\n    </div>\n  );\n}\n\nexport default App;\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}