{"ast":null,"code":"var _jsxFileName = \"/home/kenneth/Bureau/carte-projet/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [cities, setCities] = useState([]);\n  const [hoveredCity, setHoveredCity] = useState(null);\n  useEffect(() => {\n    // Fonction pour récupérer les données des villes depuis l'API\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('URL_DE_VOTRE_API');\n        setCities(response.data);\n      } catch (error) {\n        console.error('Error fetching cities:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const handleMapClick = event => {\n    const rect = event.target.getBoundingClientRect();\n    const x = (event.clientX - rect.left) / rect.width;\n    const y = (event.clientY - rect.top) / rect.height;\n    // Envoyer les coordonnées x et y au serveur pour récupérer les détails des villes à proximité\n    console.log('Clicked at:', x, y);\n  };\n  const handleCityHover = city => {\n    setHoveredCity(city);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"carte.png\",\n      alt: \"Carte de la France\",\n      onClick: handleMapClick,\n      useMap: \"#cities\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"map\", {\n      name: \"cities\",\n      children: cities.map(city => /*#__PURE__*/_jsxDEV(\"area\", {\n        shape: \"circle\",\n        coords: `${city.x},${city.y},10`,\n        onMouseOver: () => handleCityHover(city),\n        onMouseOut: () => handleCityHover(null)\n      }, city.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), hoveredCity && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"city-details\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: hoveredCity.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"eN4++yM8ceofiFlMdpXQ6wD2Axo=\");\n_c = App;\nexport default App;\n\n/*import React, { useRef, useEffect , useState} from \"react\";\n//import React, { useState } from 'react';\nimport axios from 'axios';\n//import Map from './components/Map';\n//import CityList from './components/CityList';\n//import ParametersForm from './components/ParametersForm';\nimport carte from './carte.png';\n\nfunction App() {\n // const carteRef = useRef(null);\n\n  const [cities, setCities] = useState([]);\n //const [selectedCity, setSelectedCity] = useState(null);\n  //const [maxCities, setMaxCities] = useState(10);\n  //const [maxDistance, setMaxDistance] = useState(50);\n  //const [minPopulation, setMinPopulation] = useState(10000);\n\n  const fetchData = async (x, y) => {\n    try {\n      const response = await axios.get(`http://localhost:8080/citys?x=${x}&y=${y}`);\n      setCities(response.data);\n    } catch (error) {\n      console.error(\"Error fetching cities:\", error);\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    // Traitement des paramètres du formulaire ici\n  };\n\n  return (\n    <div>\n      <img  src={carte} alt=\"Carte\"/>\n    </div>\n\n  /*return (\n    <div className=\"App\">\n      <h1>Carte de France interactive</h1>\n      <div className=\"content\">\n        <Map carte={carte} fetchData={fetchData} setSelectedCity={setSelectedCity} />\n        <CityList cities={cities} selectedCity={selectedCity} />\n      </div>\n      <ParametersForm\n        maxCities={maxCities}\n        maxDistance={maxDistance}\n        minPopulation={minPopulation}\n        setMaxCities={setMaxCities}\n        setMaxDistance={setMaxDistance}\n        setMinPopulation={setMinPopulation}\n        handleSubmit={handleSubmit}\n      />\n    </div>\n  );*/\n\n//export default App;\n\n/*import React, { useRef, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Map from \"./components/Map\"; // Composant de la carte\nimport CityList from \"./components/CityList\"; // Composant de la liste des villes\nimport ParametersForm from \"./components/ParametersForm\"; // Composant du formulaire de paramètres\nimport \"./App.css\";\nimport carte from \"./carte.png\";\n\nfunction App() {\n  const carteRef = useRef(null);\n  const [cities, setCities] = useState([]);\n  const [selectedCity, setSelectedCity] = useState(null);\n  \n  useEffect(() => {\n    const fetchData = async (event) => {\n      if (!carteRef.current) return; // Vérifie si la référence de l'image est définie\n\n      const rect = carteRef.current.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      \n      try {\n        const response = await axios.get(`http://localhost:8080/citys?x=${x}&y=${y}`);\n        setCities(response.data);\n      } catch (error) {\n        console.error(\"Error fetching cities:\", error);\n      }\n    };\n\n    if(carteRef.current){ // Ajoute l'écouteur d'événement uniquement si la référence de l'image est définie\n      carteRef.current.addEventListener(\"click\", fetchData);\n    }\n\n    return () => {\n      if(carteRef.current){\n        carteRef.current.removeEventListener(\"click\", fetchData)\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Carte de France interactive</h1>\n      <div className=\"content\">\n       \n        <Map cities={cities} setSelectedCity={setSelectedCity} />\n        <CityList cities={cities} selectedCity={selectedCity} />\n      </div>\n      <ParametersForm />\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n\n/*import \"./App.css\";\nimport React, { useRef, useEffect } from \"react\";\nimport carte from \"./carte.png\";\nimport axios from \"axios\";\n\nfunction App() {\n  const carteRef = useRef(null);\n\n  useEffect(() => {\n\n    const fetchData = async (event) => {\n      // Récupérer les coordonnées du point cliqué\n      const rect = carteRef.current.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n\n    // Fonction pour récupérer les dimensions de la carte\n    /*onst getDimensions = () => {\n      const rect = carteRef.current.getBoundingClientRect();\n      console.log(\"Largeur de la carte :\", rect.width);\n      console.log(\"Hauteur de la carte :\", rect.height);\n    };\n\n    //const fetchData = async () => {\n      // Effectuer une requête vers l'API avec les coordonnées du point cliqué\n      const response = await axios.get(\"http://localhost:8080/citys\");\n      console.log(response.data);\n      \n    };\n\n    const convertCoordinates = () => {\n      // Vos calculs de conversion ici\n      console.log(\"Latitude convertie : ...\");\n      console.log(\"Longitude convertie : ...\");\n    };\n\n\n    //getDimensions();\n    // Ajouter un écouteur de clic sur la carte\n    carteRef.current.addEventListener(\"click\", fetchData);\n\n    convertCoordinates();\n\n    return ()=>{\n      carteRef.current.removeEventListener(\"click\",fetchData);\n    \n    };\n  }, []);\n\n  return (\n    <div>\n      <img ref={carteRef} src={carte} alt=\"Carte\"/>\n    </div>\n  );\n}\n\nexport default App;\n*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","App","_s","cities","setCities","hoveredCity","setHoveredCity","fetchData","response","get","data","error","console","handleMapClick","event","rect","target","getBoundingClientRect","x","clientX","left","width","y","clientY","top","height","log","handleCityHover","city","className","children","src","alt","onClick","useMap","fileName","_jsxFileName","lineNumber","columnNumber","name","map","shape","coords","onMouseOver","onMouseOut","id","_c","$RefreshReg$"],"sources":["/home/kenneth/Bureau/carte-projet/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nfunction App() {\n  const [cities, setCities] = useState([]);\n  const [hoveredCity, setHoveredCity] = useState(null);\n\n  useEffect(() => {\n    // Fonction pour récupérer les données des villes depuis l'API\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('URL_DE_VOTRE_API');\n        setCities(response.data);\n      } catch (error) {\n        console.error('Error fetching cities:', error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const handleMapClick = (event) => {\n    const rect = event.target.getBoundingClientRect();\n    const x = (event.clientX - rect.left) / rect.width;\n    const y = (event.clientY - rect.top) / rect.height;\n    // Envoyer les coordonnées x et y au serveur pour récupérer les détails des villes à proximité\n    console.log('Clicked at:', x, y);\n  };\n\n  const handleCityHover = (city) => {\n    setHoveredCity(city);\n  };\n\n  return (\n    <div className=\"App\">\n      <img src=\"carte.png\" alt=\"Carte de la France\" onClick={handleMapClick} useMap=\"#cities\" />\n      <map name=\"cities\">\n        {cities.map(city => (\n          <area\n            key={city.id}\n            shape=\"circle\"\n            coords={`${city.x},${city.y},10`}\n            onMouseOver={() => handleCityHover(city)}\n            onMouseOut={() => handleCityHover(null)}\n          />\n        ))}\n      </map>\n      {hoveredCity && (\n        <div className=\"city-details\">\n          <h2>{hoveredCity.name}</h2>\n          {/* Calculer et afficher la distance du point ciblé par l'utilisateur */}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*import React, { useRef, useEffect , useState} from \"react\";\n//import React, { useState } from 'react';\nimport axios from 'axios';\n//import Map from './components/Map';\n//import CityList from './components/CityList';\n//import ParametersForm from './components/ParametersForm';\nimport carte from './carte.png';\n\nfunction App() {\n // const carteRef = useRef(null);\n\n  const [cities, setCities] = useState([]);\n //const [selectedCity, setSelectedCity] = useState(null);\n  //const [maxCities, setMaxCities] = useState(10);\n  //const [maxDistance, setMaxDistance] = useState(50);\n  //const [minPopulation, setMinPopulation] = useState(10000);\n\n  const fetchData = async (x, y) => {\n    try {\n      const response = await axios.get(`http://localhost:8080/citys?x=${x}&y=${y}`);\n      setCities(response.data);\n    } catch (error) {\n      console.error(\"Error fetching cities:\", error);\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    // Traitement des paramètres du formulaire ici\n  };\n\n  return (\n    <div>\n      <img  src={carte} alt=\"Carte\"/>\n    </div>\n\n  /*return (\n    <div className=\"App\">\n      <h1>Carte de France interactive</h1>\n      <div className=\"content\">\n        <Map carte={carte} fetchData={fetchData} setSelectedCity={setSelectedCity} />\n        <CityList cities={cities} selectedCity={selectedCity} />\n      </div>\n      <ParametersForm\n        maxCities={maxCities}\n        maxDistance={maxDistance}\n        minPopulation={minPopulation}\n        setMaxCities={setMaxCities}\n        setMaxDistance={setMaxDistance}\n        setMinPopulation={setMinPopulation}\n        handleSubmit={handleSubmit}\n      />\n    </div>\n  );*/\n  \n\n\n//export default App;\n\n\n\n/*import React, { useRef, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Map from \"./components/Map\"; // Composant de la carte\nimport CityList from \"./components/CityList\"; // Composant de la liste des villes\nimport ParametersForm from \"./components/ParametersForm\"; // Composant du formulaire de paramètres\nimport \"./App.css\";\nimport carte from \"./carte.png\";\n\nfunction App() {\n  const carteRef = useRef(null);\n  const [cities, setCities] = useState([]);\n  const [selectedCity, setSelectedCity] = useState(null);\n  \n  useEffect(() => {\n    const fetchData = async (event) => {\n      if (!carteRef.current) return; // Vérifie si la référence de l'image est définie\n\n      const rect = carteRef.current.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      \n      try {\n        const response = await axios.get(`http://localhost:8080/citys?x=${x}&y=${y}`);\n        setCities(response.data);\n      } catch (error) {\n        console.error(\"Error fetching cities:\", error);\n      }\n    };\n\n    if(carteRef.current){ // Ajoute l'écouteur d'événement uniquement si la référence de l'image est définie\n      carteRef.current.addEventListener(\"click\", fetchData);\n    }\n\n    return () => {\n      if(carteRef.current){\n        carteRef.current.removeEventListener(\"click\", fetchData)\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Carte de France interactive</h1>\n      <div className=\"content\">\n       \n        <Map cities={cities} setSelectedCity={setSelectedCity} />\n        <CityList cities={cities} selectedCity={selectedCity} />\n      </div>\n      <ParametersForm />\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n\n/*import \"./App.css\";\nimport React, { useRef, useEffect } from \"react\";\nimport carte from \"./carte.png\";\nimport axios from \"axios\";\n\nfunction App() {\n  const carteRef = useRef(null);\n\n  useEffect(() => {\n\n    const fetchData = async (event) => {\n      // Récupérer les coordonnées du point cliqué\n      const rect = carteRef.current.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n\n    // Fonction pour récupérer les dimensions de la carte\n    /*onst getDimensions = () => {\n      const rect = carteRef.current.getBoundingClientRect();\n      console.log(\"Largeur de la carte :\", rect.width);\n      console.log(\"Hauteur de la carte :\", rect.height);\n    };\n\n    //const fetchData = async () => {\n      // Effectuer une requête vers l'API avec les coordonnées du point cliqué\n      const response = await axios.get(\"http://localhost:8080/citys\");\n      console.log(response.data);\n      \n    };\n\n    const convertCoordinates = () => {\n      // Vos calculs de conversion ici\n      console.log(\"Latitude convertie : ...\");\n      console.log(\"Longitude convertie : ...\");\n    };\n\n\n    //getDimensions();\n    // Ajouter un écouteur de clic sur la carte\n    carteRef.current.addEventListener(\"click\", fetchData);\n\n    convertCoordinates();\n\n    return ()=>{\n      carteRef.current.removeEventListener(\"click\",fetchData);\n    \n    };\n  }, []);\n\n  return (\n    <div>\n      <img ref={carteRef} src={carte} alt=\"Carte\"/>\n    </div>\n  );\n}\n\nexport default App;\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}