{"ast":null,"code":"var _jsxFileName = \"/home/kenneth/Bureau/carte-projet/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport carte from './carte.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [cities, setCities] = useState([]);\n  const [hoveredCity, setHoveredCity] = useState(null);\n  const [maxCities, setMaxCities] = useState(100); // Nombre maximal de villes à afficher\n  const [maxDistance, setMaxDistance] = useState(50); // Distance maximale du point ciblé (en km)\n  const [minPopulation, setMinPopulation] = useState(1000); // Population minimale pour qu'une ville soit prise en compte\n  const [userCoords, setUserCoords] = useState({\n    x: null,\n    y: null\n  });\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = async () => {\n    try {\n      const response = await axios.get('http://localhost:8080/citys');\n      setCities(response.data);\n      console.log('Données des villes récupérées avec succès:', response.data);\n    } catch (error) {\n      console.error('Erreur lors de la récupération des données des villes:', error);\n    }\n  };\n  const [redPoints, setRedPoints] = useState([]);\n  const handleMapClick = async event => {\n    const rect = event.target.getBoundingClientRect();\n    const x = (event.clientX - rect.left) / rect.width;\n    const y = (event.clientY - rect.top) / rect.height;\n    console.log('Clicked at:', x, y);\n\n    // Créez un nouvel objet représentant les coordonnées du point rouge\n    const newRedPoint = {\n      x,\n      y\n    };\n    try {\n      const response = await axios.get(`http://localhost:8080/citys?x=${x}&y=${y}`);\n      const nearbyCities = response.data;\n      if (nearbyCities.length === 0) {\n        console.log('Aucune ville trouvée à proximité de ce point.');\n      } else {\n        setCities(nearbyCities);\n        console.log('Villes récupérées:', nearbyCities);\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des villes:', error);\n    }\n\n    // Mettez à jour le tableau d'état pour inclure ce nouveau point rouge\n    setRedPoints([...redPoints, newRedPoint]);\n  };\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\n    const R = 6371; // Rayon de la Terre en km\n    const dLat = (lat2 - lat1) * (Math.PI / 180);\n    const dLon = (lon2 - lon1) * (Math.PI / 180);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const d = R * c;\n    return d.toFixed(0); // Distance arrondie à l'entier le plus proche\n  };\n  const handleCityHover = city => {\n    setHoveredCity(city);\n    console.log('Ville survolée:', city);\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    // Récupérer les valeurs des champs du formulaire\n    const maxVilles = parseInt(event.target.maxVilles.value);\n    const distanceMax = parseInt(event.target.distanceMax.value);\n    const populationMin = parseInt(event.target.populationMin.value);\n    console.log('maxVilles:', maxVilles);\n    console.log('distanceMax:', distanceMax);\n    console.log('populationMin:', populationMin);\n\n    // Filtrer les villes en fonction des paramètres du formulaire\n    const filteredCities = cities.filter(city => {\n      console.log('City:', city.name, 'Distance:', city.distance, 'Population:', city.population);\n      return city.distance <= distanceMax && city.population >= populationMin;\n    });\n\n    // Mettre à jour l'état des villes à afficher\n    setCities(filteredCities);\n    console.log('ville filtrer:', filteredCities);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      children: [hoveredCity && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"city-details\",\n        style: {\n          left: hoveredCity.x + 20,\n          top: hoveredCity.y\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: hoveredCity.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this), userCoords.x !== null && userCoords.y !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Distance: \", calculateDistance(userCoords.latitude, userCoords.longitude, hoveredCity.latitude, hoveredCity.longitude), \" km\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: carte,\n        alt: \"Carte de la France\",\n        onClick: handleMapClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), redPoints.map((point, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"red-point\",\n        style: {\n          left: `${point.x}px`,\n          top: `${point.y}px`\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 14\n      }, this)), /*#__PURE__*/_jsxDEV(\"map\", {\n        name: \"cities\",\n        children: cities.map(city => /*#__PURE__*/_jsxDEV(\"area\", {\n          shape: \"circle\",\n          coords: `${city.x},${city.y},10`,\n          onMouseOver: () => handleCityHover(city),\n          onMouseOut: () => handleCityHover(null)\n        }, city.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), cities.map(city => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"city-marker\",\n        style: {\n          left: `${city.x}px`,\n          top: `${city.y}px`\n        },\n        onMouseOver: () => handleCityHover(city),\n        onMouseOut: () => handleCityHover(null)\n      }, city.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"City Filtering App\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"maxDistance\",\n            children: \"Max Distance (km):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            id: \"maxDistance\",\n            value: maxDistance,\n            onChange: e => setMaxDistance(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"minPopulation\",\n            children: \"Min Population:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            id: \"minPopulation\",\n            value: minPopulation,\n            onChange: e => setMinPopulation(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Filter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Liste des Villes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: cities.map(city => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: city.name\n        }, city.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"pjiK8UmSjn22Q87avkq3/P6ZdzA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","carte","jsxDEV","_jsxDEV","App","_s","cities","setCities","hoveredCity","setHoveredCity","maxCities","setMaxCities","maxDistance","setMaxDistance","minPopulation","setMinPopulation","userCoords","setUserCoords","x","y","fetchData","response","get","data","console","log","error","redPoints","setRedPoints","handleMapClick","event","rect","target","getBoundingClientRect","clientX","left","width","clientY","top","height","newRedPoint","nearbyCities","length","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt","d","toFixed","handleCityHover","city","handleSubmit","preventDefault","maxVilles","parseInt","value","distanceMax","populationMin","filteredCities","filter","name","distance","population","className","children","style","fileName","_jsxFileName","lineNumber","columnNumber","latitude","longitude","src","alt","onClick","map","point","index","shape","coords","onMouseOver","onMouseOut","id","onSubmit","htmlFor","type","onChange","e","_c","$RefreshReg$"],"sources":["/home/kenneth/Bureau/carte-projet/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport carte from './carte.png';\n\nfunction App() {\n  const [cities, setCities] = useState([]);\n  const [hoveredCity, setHoveredCity] = useState(null);\n  const [maxCities, setMaxCities] = useState(100); // Nombre maximal de villes à afficher\n  const [maxDistance, setMaxDistance] = useState(50); // Distance maximale du point ciblé (en km)\n  const [minPopulation, setMinPopulation] = useState(1000); // Population minimale pour qu'une ville soit prise en compte\n  const [userCoords, setUserCoords] = useState({ x: null, y: null });\n\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get('http://localhost:8080/citys');\n      setCities(response.data);\n      console.log('Données des villes récupérées avec succès:', response.data);\n    } catch (error) {\n      console.error('Erreur lors de la récupération des données des villes:', error);\n    }\n  };\n\n  const [redPoints, setRedPoints] = useState([]);\n\n  const handleMapClick = async (event) => {\n    const rect = event.target.getBoundingClientRect();\n    const x = (event.clientX - rect.left) / rect.width;\n    const y = (event.clientY - rect.top) / rect.height;\n    console.log('Clicked at:', x, y);\n\n     // Créez un nouvel objet représentant les coordonnées du point rouge\n    const newRedPoint = { x, y };\n\n    try {\n      const response = await axios.get(`http://localhost:8080/citys?x=${x}&y=${y}`);\n      const nearbyCities = response.data;\n      if (nearbyCities.length === 0) {\n        console.log('Aucune ville trouvée à proximité de ce point.');\n      } else {\n        setCities(nearbyCities);\n        console.log('Villes récupérées:', nearbyCities);\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des villes:', error);\n    }\n\n    // Mettez à jour le tableau d'état pour inclure ce nouveau point rouge\n    setRedPoints([...redPoints, newRedPoint]);\n  };\n\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\n    const R = 6371; // Rayon de la Terre en km\n    const dLat = (lat2 - lat1) * (Math.PI / 180);\n    const dLon = (lon2 - lon1) * (Math.PI / 180);\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const d = R * c;\n    return d.toFixed(0); // Distance arrondie à l'entier le plus proche\n  };\n\n  const handleCityHover = (city) => {\n    setHoveredCity(city);\n    console.log('Ville survolée:', city);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    \n    // Récupérer les valeurs des champs du formulaire\n    const maxVilles = parseInt(event.target.maxVilles.value);\n    const distanceMax = parseInt(event.target.distanceMax.value);\n    const populationMin = parseInt(event.target.populationMin.value);\n\n    console.log('maxVilles:', maxVilles);\n  console.log('distanceMax:', distanceMax);\n  console.log('populationMin:', populationMin);\n  \n    // Filtrer les villes en fonction des paramètres du formulaire\n    const filteredCities = cities.filter(city => {\n\n      console.log('City:', city.name, 'Distance:', city.distance, 'Population:', city.population);\n      return city.distance <= distanceMax &&\n             city.population >= populationMin;\n    })\n \n    // Mettre à jour l'état des villes à afficher\n    setCities(filteredCities);\n    console.log('ville filtrer:', filteredCities);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"map-container\">\n      {hoveredCity && (\n          <div className=\"city-details\" style={{ left: hoveredCity.x + 20, top: hoveredCity.y }}>\n            <h2>{hoveredCity.name}</h2>\n            {userCoords.x !== null && userCoords.y !== null && (\n              <p>Distance: {calculateDistance(userCoords.latitude, userCoords.longitude, hoveredCity.latitude, hoveredCity.longitude)} km</p>\n            )}\n          </div>\n        )}\n        <img src={carte} alt=\"Carte de la France\" onClick={handleMapClick} />\n        {redPoints.map((point, index) => (\n             <div\n              key={index}\n              className=\"red-point\"\n              style={{ left: `${point.x}px`, top: `${point.y}px` }}\n            />\n          ))}\n        <map name=\"cities\">\n          {cities.map(city => (\n            <area\n              key={city.id}\n              shape=\"circle\"\n              coords={`${city.x},${city.y},10`}\n              onMouseOver={() => handleCityHover(city)}\n              onMouseOut={() => handleCityHover(null)}\n            />\n          ))}\n        </map>\n        {cities.map(city => (\n          <div\n            key={city.id}\n            className=\"city-marker\"\n            style={{ left: `${city.x}px`, top: `${city.y}px` }}\n            onMouseOver={() => handleCityHover(city)}\n            onMouseOut={() => handleCityHover(null)}\n          />\n        ))}\n      </div>\n      <div className=\"sidebar\">\n        <div className=\"form-container\">\n        <h1>City Filtering App</h1>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"maxDistance\">Max Distance (km):</label>\n        <input\n          type=\"number\"\n          id=\"maxDistance\"\n          value={maxDistance}\n          onChange={(e) => setMaxDistance(e.target.value)}\n        />\n        <label htmlFor=\"minPopulation\">Min Population:</label>\n        <input\n          type=\"number\"\n          id=\"minPopulation\"\n          value={minPopulation}\n          onChange={(e) => setMinPopulation(e.target.value)}\n        />\n        <button type=\"submit\">Filter</button>\n      </form>\n        </div>\n        <h3>Liste des Villes</h3>\n        <ul>\n          {cities.map(city => (\n            <li key={city.id}>{city.name}</li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}