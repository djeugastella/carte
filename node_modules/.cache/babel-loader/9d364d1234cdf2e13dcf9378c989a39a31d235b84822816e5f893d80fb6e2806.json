{"ast":null,"code":"var _jsxFileName = \"/home/kenneth/Bureau/carte-projet/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport carte from './carte.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [cities, setCities] = useState([]);\n  const [hoveredCity, setHoveredCity] = useState(null);\n  const [userCoords, setUserCoords] = useState({\n    x: null,\n    y: null\n  });\n  const [formData, setFormData] = useState({\n    maxVilles: 100,\n    distanceMax: 50,\n    populationMin: 1000\n  });\n  useEffect(() => {\n    fetchData();\n  }, []);\n  useEffect(() => {\n    fetchData();\n  }, [formData]);\n  const fetchData = async () => {\n    try {\n      const response = await axios.get('http://localhost:8080/citys');\n      setCities(response.data);\n      console.log('Données des villes récupérées avec succès:', response.data);\n    } catch (error) {\n      console.error('Erreur lors de la récupération des données des villes:', error);\n    }\n  };\n  const [redPoints, setRedPoints] = useState([]);\n  const handleMapClick = async event => {\n    const rect = event.target.getBoundingClientRect();\n    const x = (event.clientX - rect.left) / rect.width;\n    const y = (event.clientY - rect.top) / rect.height;\n    console.log('Clicked at:', x, y);\n\n    // Créez un nouvel objet représentant les coordonnées du point rouge\n    const newRedPoint = {\n      x,\n      y\n    };\n    try {\n      const response = await axios.get(`http://localhost:8080/citys?x=${x}&y=${y}`);\n      const nearbyCities = response.data;\n      if (nearbyCities.length === 0) {\n        console.log('Aucune ville trouvée à proximité de ce point.');\n      } else {\n        setCities(nearbyCities);\n        console.log('Villes récupérées:', nearbyCities);\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des villes:', error);\n    }\n\n    // Mettez à jour le tableau d'état pour inclure ce nouveau point rouge\n    setRedPoints([...redPoints, newRedPoint]);\n  };\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\n    const R = 6371; // Rayon de la Terre en km\n    const dLat = (lat2 - lat1) * (Math.PI / 180);\n    const dLon = (lon2 - lon1) * (Math.PI / 180);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const d = R * c;\n    return d.toFixed(0); // Distance arrondie à l'entier le plus proche\n  };\n  const handleCityHover = city => {\n    setHoveredCity(city);\n    console.log('Ville survolée:', city);\n  };\n\n  //  const handleSubmit = (event) => {\n  //  event.preventDefault();\n\n  // Récupérer les valeurs des champs du formulaire\n  //const maxVilles = parseInt(event.target.maxVilles.value);\n  //const distanceMax = parseInt(event.target.distanceMax.value);\n  //const populationMin = parseInt(event.target.populationMin.value);\n\n  // Filtrer les villes en fonction des paramètres du formulaire\n\n  const filteredCities = () => {\n    const {\n      maxVilles,\n      distanceMax,\n      populationMin\n    } = formData;\n    const filtered = cities.filter(city => {\n      return city.distance <= distanceMax && city.population >= populationMin;\n    }).slice(0, maxVilles);\n    setFilteredCities(filtered);\n  };\n  const handleInputChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      children: [hoveredCity && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"city-details\",\n        style: {\n          left: hoveredCity.x + 20,\n          top: hoveredCity.y\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: hoveredCity.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this), userCoords.x !== null && userCoords.y !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Distance: \", calculateDistance(userCoords.latitude, userCoords.longitude, hoveredCity.latitude, hoveredCity.longitude), \" km\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: carte,\n        alt: \"Carte de la France\",\n        onClick: handleMapClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), redPoints.map((point, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"red-point\",\n        style: {\n          left: `${point.x}px`,\n          top: `${point.y}px`\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 14\n      }, this)), /*#__PURE__*/_jsxDEV(\"map\", {\n        name: \"cities\",\n        children: cities.map(city => /*#__PURE__*/_jsxDEV(\"area\", {\n          shape: \"circle\",\n          coords: `${city.x},${city.y},10`,\n          onMouseOver: () => handleCityHover(city),\n          onMouseOut: () => handleCityHover(null)\n        }, city.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), cities.map(city => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"city-marker\",\n        style: {\n          left: `${city.x}px`,\n          top: `${city.y}px`\n        },\n        onMouseOver: () => handleCityHover(city),\n        onMouseOut: () => handleCityHover(null)\n      }, city.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-container\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"maxVilles\",\n            className: \"form-label\",\n            children: \"Nombre maximal de villes :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            id: \"maxVilles\",\n            name: \"maxVilles\",\n            className: \"form-input\",\n            value: formData.maxVilles,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"distanceMax\",\n            className: \"form-label\",\n            children: \"Distance maximale (en km) :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            id: \"distanceMax\",\n            name: \"distanceMax\",\n            className: \"form-input\",\n            value: formData.distanceMax,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"populationMin\",\n            className: \"form-label\",\n            children: \"Population minimale :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            id: \"populationMin\",\n            name: \"populationMin\",\n            className: \"form-input\",\n            value: formData.populationMin,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"form-button\",\n            children: \"Filtrer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Liste des Villes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: filteredCities.map(city => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [city.name, \" \", calculateDistance(userCoords.latitude, userCoords.longitude, city.latitude, city.longitude), \" km \", city.name]\n        }, city.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"HDwypQXE63y6TtVeW3jMpVHmnvQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","carte","jsxDEV","_jsxDEV","App","_s","cities","setCities","hoveredCity","setHoveredCity","userCoords","setUserCoords","x","y","formData","setFormData","maxVilles","distanceMax","populationMin","fetchData","response","get","data","console","log","error","redPoints","setRedPoints","handleMapClick","event","rect","target","getBoundingClientRect","clientX","left","width","clientY","top","height","newRedPoint","nearbyCities","length","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt","d","toFixed","handleCityHover","city","filteredCities","filtered","filter","distance","population","slice","setFilteredCities","handleInputChange","name","value","className","children","style","fileName","_jsxFileName","lineNumber","columnNumber","latitude","longitude","src","alt","onClick","map","point","index","shape","coords","onMouseOver","onMouseOut","id","onSubmit","handleSubmit","htmlFor","type","onChange","_c","$RefreshReg$"],"sources":["/home/kenneth/Bureau/carte-projet/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport carte from './carte.png';\n\nfunction App() {\n  const [cities, setCities] = useState([]);\n  const [hoveredCity, setHoveredCity] = useState(null);\n  const [userCoords, setUserCoords] = useState({ x: null, y: null });\n  const [formData, setFormData] = useState({\n    maxVilles: 100,\n    distanceMax: 50,\n    populationMin: 1000\n  });\n\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n\n  useEffect(() => {\n    fetchData();\n  }, [formData]);\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get('http://localhost:8080/citys');\n      setCities(response.data);\n      console.log('Données des villes récupérées avec succès:', response.data);\n    } catch (error) {\n      console.error('Erreur lors de la récupération des données des villes:', error);\n    }\n  };\n\n  const [redPoints, setRedPoints] = useState([]);\n\n  const handleMapClick = async (event) => {\n    const rect = event.target.getBoundingClientRect();\n    const x = (event.clientX - rect.left) / rect.width;\n    const y = (event.clientY - rect.top) / rect.height;\n    console.log('Clicked at:', x, y);\n\n     // Créez un nouvel objet représentant les coordonnées du point rouge\n    const newRedPoint = { x, y };\n\n    try {\n      const response = await axios.get(`http://localhost:8080/citys?x=${x}&y=${y}`);\n      const nearbyCities = response.data;\n      if (nearbyCities.length === 0) {\n        console.log('Aucune ville trouvée à proximité de ce point.');\n      } else {\n        setCities(nearbyCities);\n        console.log('Villes récupérées:', nearbyCities);\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des villes:', error);\n    }\n\n    // Mettez à jour le tableau d'état pour inclure ce nouveau point rouge\n    setRedPoints([...redPoints, newRedPoint]);\n  };\n\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\n    const R = 6371; // Rayon de la Terre en km\n    const dLat = (lat2 - lat1) * (Math.PI / 180);\n    const dLon = (lon2 - lon1) * (Math.PI / 180);\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const d = R * c;\n    return d.toFixed(0); // Distance arrondie à l'entier le plus proche\n  };\n\n  const handleCityHover = (city) => {\n    setHoveredCity(city);\n    console.log('Ville survolée:', city);\n  };\n\n//  const handleSubmit = (event) => {\n  //  event.preventDefault();\n    \n    // Récupérer les valeurs des champs du formulaire\n    //const maxVilles = parseInt(event.target.maxVilles.value);\n    //const distanceMax = parseInt(event.target.distanceMax.value);\n    //const populationMin = parseInt(event.target.populationMin.value);\n  \n    // Filtrer les villes en fonction des paramètres du formulaire\n\n    const filteredCities = () => {\n      const { maxVilles, distanceMax, populationMin } = formData;\n      const filtered = cities.filter(city => {\n        return city.distance <= distanceMax && city.population >= populationMin;\n      }).slice(0, maxVilles);\n      setFilteredCities(filtered);\n    };\n  \n    const handleInputChange = (event) => {\n      const { name, value } = event.target;\n      setFormData({\n        ...formData,\n        [name]: value\n      });\n    };\n\n\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"map-container\">\n      {hoveredCity && (\n          <div className=\"city-details\" style={{ left: hoveredCity.x + 20, top: hoveredCity.y }}>\n            <h2>{hoveredCity.name}</h2>\n            {userCoords.x !== null && userCoords.y !== null && (\n              <p>Distance: {calculateDistance(userCoords.latitude, userCoords.longitude, hoveredCity.latitude, hoveredCity.longitude)} km</p>\n            )}\n          </div>\n        )}\n        <img src={carte} alt=\"Carte de la France\" onClick={handleMapClick} />\n        {redPoints.map((point, index) => (\n             <div\n              key={index}\n              className=\"red-point\"\n              style={{ left: `${point.x}px`, top: `${point.y}px` }}\n            />\n          ))}\n        <map name=\"cities\">\n          {cities.map(city => (\n            <area\n              key={city.id}\n              shape=\"circle\"\n              coords={`${city.x},${city.y},10`}\n              onMouseOver={() => handleCityHover(city)}\n              onMouseOut={() => handleCityHover(null)}\n            />\n          ))}\n        </map>\n        {cities.map(city => (\n          <div\n            key={city.id}\n            className=\"city-marker\"\n            style={{ left: `${city.x}px`, top: `${city.y}px` }}\n            onMouseOver={() => handleCityHover(city)}\n            onMouseOut={() => handleCityHover(null)}\n          />\n        ))}\n      </div>\n      <div className=\"sidebar\">\n        <div className=\"form-container\">\n          <form onSubmit={handleSubmit}>\n            <label htmlFor=\"maxVilles\" className=\"form-label\">Nombre maximal de villes :</label>\n            <input type=\"number\" id=\"maxVilles\" name=\"maxVilles\" className=\"form-input\" value={formData.maxVilles} onChange={handleInputChange} />\n\n            <label htmlFor=\"distanceMax\" className=\"form-label\">Distance maximale (en km) :</label>\n            <input type=\"number\" id=\"distanceMax\" name=\"distanceMax\" className=\"form-input\" value={formData.distanceMax} onChange={handleInputChange} />\n\n            <label htmlFor=\"populationMin\" className=\"form-label\">Population minimale :</label>\n            <input type=\"number\" id=\"populationMin\" name=\"populationMin\" className=\"form-input\" value={formData.populationMin} onChange={handleInputChange}/>\n\n            <button type=\"submit\" className=\"form-button\">Filtrer</button>\n          </form>\n        </div>\n        <h3>Liste des Villes</h3>\n        <ul>\n          {filteredCities.map(city => (\n            <li key={city.id}>{city.name} {calculateDistance(userCoords.latitude, userCoords.longitude, city.latitude, city.longitude)} km {city.name}</li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}