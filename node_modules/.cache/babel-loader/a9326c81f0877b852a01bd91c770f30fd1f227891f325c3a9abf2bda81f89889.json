{"ast":null,"code":"var _jsxFileName = \"/home/kenneth/Bureau/carte-projet/src/App.js\";\n//import React, { useState, useEffect } from 'react';\n//import axios from 'axios';\n//import './App.css';\n//import carte from './carte.png';\n\n/*function App() {\n  const [cities, setCities] = useState([]);\n  const [hoveredCity, setHoveredCity] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('http://localhost:8080/citys');\n        setCities(response.data);\n        console.log('Données des villes récupérées avec succès:', response.data);\n      } catch (error) {\n        console.error('Erreur lors de la récupération des données des villes:', error);\n      }\n    };\n\n    fetchData(); // Appel direct de la fonction fetchData\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Utilisation d'une dépendance vide pour s'assurer que le useEffect s'exécute une seule fois\n\n  const handleMapClick = (event) => {\n    const rect = event.target.getBoundingClientRect();\n    const x = (event.clientX - rect.left) / rect.width;\n    const y = (event.clientY - rect.top) / rect.height;\n    console.log('Clicked at:', x, y);\n\n    // Envoi des coordonnées x et y au serveur pour récupérer les détails des villes à proximité\n    // Vous devez implémenter cette partie pour envoyer les coordonnées au serveur et gérer la réponse\n  };\n\n  const handleCityHover = (city) => {\n    debugger;\n    console.log('Ville survolée:', city);\n    setHoveredCity(city);\n    //console.log('Ville survolée:', city);\n  };\n\n  return (\n    <div className=\"App\">\n      <img src={carte} alt=\"Carte de la France\" onClick={handleMapClick} useMap=\"#cities\" />\n      <map name=\"cities\">\n        {cities.map(city => (\n          <area\n            key={city.id}\n            shape=\"circle\"\n            coords={`${city.x},${city.y},10`}\n            onMouseOver={() => {\n              handleCityHover(city);\n            console.log('Mouse over');\n            }}\n            onMouseOut={() => {\n              handleCityHover(null);\n            console.log('Mouse out');\n            }}\n          />\n        ))}\n      </map>\n      {hoveredCity && (\n        <div className=\"city-details\">\n          <h2>{hoveredCity.name}</h2>\n          {/* Ici, vous pouvez calculer et afficher la distance du point ciblé par l'utilisateur }\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n*/\n\nimport React from 'react';\nimport Map from './components/Map';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.fetchCityDetails = (lat, lng) => {\n      fetch(`http://localhost:8080/citys`).then(response => response.json()).then(data => {\n        this.setState({\n          cityDetails: data\n        });\n      }).catch(error => console.error('Erreur lors de la récupération des détails de la ville :', error));\n    };\n    this.state = {\n      cityDetails: null\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Carte des villes fran\\xE7aises\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Map, {\n        onClick: this.fetchCityDetails\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;\n\n/*import React, { useRef, useEffect , useState} from \"react\";\n//import React, { useState } from 'react';\nimport axios from 'axios';\n//import Map from './components/Map';\n//import CityList from './components/CityList';\n//import ParametersForm from './components/ParametersForm';\nimport carte from './carte.png';\n\nfunction App() {\n // const carteRef = useRef(null);\n\n  const [cities, setCities] = useState([]);\n //const [selectedCity, setSelectedCity] = useState(null);\n  //const [maxCities, setMaxCities] = useState(10);\n  //const [maxDistance, setMaxDistance] = useState(50);\n  //const [minPopulation, setMinPopulation] = useState(10000);\n\n  const fetchData = async (x, y) => {\n    try {\n      const response = await axios.get(`http://localhost:8080/citys?x=${x}&y=${y}`);\n      setCities(response.data);\n    } catch (error) {\n      console.error(\"Error fetching cities:\", error);\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    // Traitement des paramètres du formulaire ici\n  };\n\n  return (\n    <div>\n      <img  src={carte} alt=\"Carte\"/>\n    </div>\n\n  /*return (\n    <div className=\"App\">\n      <h1>Carte de France interactive</h1>\n      <div className=\"content\">\n        <Map carte={carte} fetchData={fetchData} setSelectedCity={setSelectedCity} />\n        <CityList cities={cities} selectedCity={selectedCity} />\n      </div>\n      <ParametersForm\n        maxCities={maxCities}\n        maxDistance={maxDistance}\n        minPopulation={minPopulation}\n        setMaxCities={setMaxCities}\n        setMaxDistance={setMaxDistance}\n        setMinPopulation={setMinPopulation}\n        handleSubmit={handleSubmit}\n      />\n    </div>\n  );*/\n\n//export default App;\n\n/*import React, { useRef, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Map from \"./components/Map\"; // Composant de la carte\nimport CityList from \"./components/CityList\"; // Composant de la liste des villes\nimport ParametersForm from \"./components/ParametersForm\"; // Composant du formulaire de paramètres\nimport \"./App.css\";\nimport carte from \"./carte.png\";\n\nfunction App() {\n  const carteRef = useRef(null);\n  const [cities, setCities] = useState([]);\n  const [selectedCity, setSelectedCity] = useState(null);\n  \n  useEffect(() => {\n    const fetchData = async (event) => {\n      if (!carteRef.current) return; // Vérifie si la référence de l'image est définie\n\n      const rect = carteRef.current.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      \n      try {\n        const response = await axios.get(`http://localhost:8080/citys?x=${x}&y=${y}`);\n        setCities(response.data);\n      } catch (error) {\n        console.error(\"Error fetching cities:\", error);\n      }\n    };\n\n    if(carteRef.current){ // Ajoute l'écouteur d'événement uniquement si la référence de l'image est définie\n      carteRef.current.addEventListener(\"click\", fetchData);\n    }\n\n    return () => {\n      if(carteRef.current){\n        carteRef.current.removeEventListener(\"click\", fetchData)\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Carte de France interactive</h1>\n      <div className=\"content\">\n       \n        <Map cities={cities} setSelectedCity={setSelectedCity} />\n        <CityList cities={cities} selectedCity={selectedCity} />\n      </div>\n      <ParametersForm />\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n\n/*import \"./App.css\";\nimport React, { useRef, useEffect } from \"react\";\nimport carte from \"./carte.png\";\nimport axios from \"axios\";\n\nfunction App() {\n  const carteRef = useRef(null);\n\n  useEffect(() => {\n\n    const fetchData = async (event) => {\n      // Récupérer les coordonnées du point cliqué\n      const rect = carteRef.current.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n\n    // Fonction pour récupérer les dimensions de la carte\n    /*onst getDimensions = () => {\n      const rect = carteRef.current.getBoundingClientRect();\n      console.log(\"Largeur de la carte :\", rect.width);\n      console.log(\"Hauteur de la carte :\", rect.height);\n    };\n\n    //const fetchData = async () => {\n      // Effectuer une requête vers l'API avec les coordonnées du point cliqué\n      const response = await axios.get(\"http://localhost:8080/citys\");\n      console.log(response.data);\n      \n    };\n\n    const convertCoordinates = () => {\n      // Vos calculs de conversion ici\n      console.log(\"Latitude convertie : ...\");\n      console.log(\"Longitude convertie : ...\");\n    };\n\n\n    //getDimensions();\n    // Ajouter un écouteur de clic sur la carte\n    carteRef.current.addEventListener(\"click\", fetchData);\n\n    convertCoordinates();\n\n    return ()=>{\n      carteRef.current.removeEventListener(\"click\",fetchData);\n    \n    };\n  }, []);\n\n  return (\n    <div>\n      <img ref={carteRef} src={carte} alt=\"Carte\"/>\n    </div>\n  );\n}\n\nexport default App;\n*/","map":{"version":3,"names":["React","Map","jsxDEV","_jsxDEV","App","Component","constructor","props","fetchCityDetails","lat","lng","fetch","then","response","json","data","setState","cityDetails","catch","error","console","state","render","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick"],"sources":["/home/kenneth/Bureau/carte-projet/src/App.js"],"sourcesContent":["//import React, { useState, useEffect } from 'react';\n//import axios from 'axios';\n//import './App.css';\n//import carte from './carte.png';\n\n/*function App() {\n  const [cities, setCities] = useState([]);\n  const [hoveredCity, setHoveredCity] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('http://localhost:8080/citys');\n        setCities(response.data);\n        console.log('Données des villes récupérées avec succès:', response.data);\n      } catch (error) {\n        console.error('Erreur lors de la récupération des données des villes:', error);\n      }\n    };\n\n    fetchData(); // Appel direct de la fonction fetchData\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Utilisation d'une dépendance vide pour s'assurer que le useEffect s'exécute une seule fois\n\n  const handleMapClick = (event) => {\n    const rect = event.target.getBoundingClientRect();\n    const x = (event.clientX - rect.left) / rect.width;\n    const y = (event.clientY - rect.top) / rect.height;\n    console.log('Clicked at:', x, y);\n\n    // Envoi des coordonnées x et y au serveur pour récupérer les détails des villes à proximité\n    // Vous devez implémenter cette partie pour envoyer les coordonnées au serveur et gérer la réponse\n  };\n\n  const handleCityHover = (city) => {\n    debugger;\n    console.log('Ville survolée:', city);\n    setHoveredCity(city);\n    //console.log('Ville survolée:', city);\n  };\n\n  return (\n    <div className=\"App\">\n      <img src={carte} alt=\"Carte de la France\" onClick={handleMapClick} useMap=\"#cities\" />\n      <map name=\"cities\">\n        {cities.map(city => (\n          <area\n            key={city.id}\n            shape=\"circle\"\n            coords={`${city.x},${city.y},10`}\n            onMouseOver={() => {\n              handleCityHover(city);\n            console.log('Mouse over');\n            }}\n            onMouseOut={() => {\n              handleCityHover(null);\n            console.log('Mouse out');\n            }}\n          />\n        ))}\n      </map>\n      {hoveredCity && (\n        <div className=\"city-details\">\n          <h2>{hoveredCity.name}</h2>\n          {/* Ici, vous pouvez calculer et afficher la distance du point ciblé par l'utilisateur }\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n*/\n\n\n\nimport React from 'react';\nimport Map from './components/Map';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityDetails: null,\n    };\n  }\n\n  fetchCityDetails = (lat, lng) => {\n    fetch(`http://localhost:8080/citys`)\n      .then(response => response.json())\n      .then(data => {\n        this.setState({ cityDetails: data });\n      })\n      .catch(error => console.error('Erreur lors de la récupération des détails de la ville :', error));\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Carte des villes françaises</h1>\n        <Map onClick={this.fetchCityDetails} />\n        {/* Ajouter le code pour afficher les détails de la ville */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*import React, { useRef, useEffect , useState} from \"react\";\n//import React, { useState } from 'react';\nimport axios from 'axios';\n//import Map from './components/Map';\n//import CityList from './components/CityList';\n//import ParametersForm from './components/ParametersForm';\nimport carte from './carte.png';\n\nfunction App() {\n // const carteRef = useRef(null);\n\n  const [cities, setCities] = useState([]);\n //const [selectedCity, setSelectedCity] = useState(null);\n  //const [maxCities, setMaxCities] = useState(10);\n  //const [maxDistance, setMaxDistance] = useState(50);\n  //const [minPopulation, setMinPopulation] = useState(10000);\n\n  const fetchData = async (x, y) => {\n    try {\n      const response = await axios.get(`http://localhost:8080/citys?x=${x}&y=${y}`);\n      setCities(response.data);\n    } catch (error) {\n      console.error(\"Error fetching cities:\", error);\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    // Traitement des paramètres du formulaire ici\n  };\n\n  return (\n    <div>\n      <img  src={carte} alt=\"Carte\"/>\n    </div>\n\n  /*return (\n    <div className=\"App\">\n      <h1>Carte de France interactive</h1>\n      <div className=\"content\">\n        <Map carte={carte} fetchData={fetchData} setSelectedCity={setSelectedCity} />\n        <CityList cities={cities} selectedCity={selectedCity} />\n      </div>\n      <ParametersForm\n        maxCities={maxCities}\n        maxDistance={maxDistance}\n        minPopulation={minPopulation}\n        setMaxCities={setMaxCities}\n        setMaxDistance={setMaxDistance}\n        setMinPopulation={setMinPopulation}\n        handleSubmit={handleSubmit}\n      />\n    </div>\n  );*/\n  \n\n\n//export default App;\n\n\n\n/*import React, { useRef, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Map from \"./components/Map\"; // Composant de la carte\nimport CityList from \"./components/CityList\"; // Composant de la liste des villes\nimport ParametersForm from \"./components/ParametersForm\"; // Composant du formulaire de paramètres\nimport \"./App.css\";\nimport carte from \"./carte.png\";\n\nfunction App() {\n  const carteRef = useRef(null);\n  const [cities, setCities] = useState([]);\n  const [selectedCity, setSelectedCity] = useState(null);\n  \n  useEffect(() => {\n    const fetchData = async (event) => {\n      if (!carteRef.current) return; // Vérifie si la référence de l'image est définie\n\n      const rect = carteRef.current.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      \n      try {\n        const response = await axios.get(`http://localhost:8080/citys?x=${x}&y=${y}`);\n        setCities(response.data);\n      } catch (error) {\n        console.error(\"Error fetching cities:\", error);\n      }\n    };\n\n    if(carteRef.current){ // Ajoute l'écouteur d'événement uniquement si la référence de l'image est définie\n      carteRef.current.addEventListener(\"click\", fetchData);\n    }\n\n    return () => {\n      if(carteRef.current){\n        carteRef.current.removeEventListener(\"click\", fetchData)\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Carte de France interactive</h1>\n      <div className=\"content\">\n       \n        <Map cities={cities} setSelectedCity={setSelectedCity} />\n        <CityList cities={cities} selectedCity={selectedCity} />\n      </div>\n      <ParametersForm />\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n\n/*import \"./App.css\";\nimport React, { useRef, useEffect } from \"react\";\nimport carte from \"./carte.png\";\nimport axios from \"axios\";\n\nfunction App() {\n  const carteRef = useRef(null);\n\n  useEffect(() => {\n\n    const fetchData = async (event) => {\n      // Récupérer les coordonnées du point cliqué\n      const rect = carteRef.current.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n\n    // Fonction pour récupérer les dimensions de la carte\n    /*onst getDimensions = () => {\n      const rect = carteRef.current.getBoundingClientRect();\n      console.log(\"Largeur de la carte :\", rect.width);\n      console.log(\"Hauteur de la carte :\", rect.height);\n    };\n\n    //const fetchData = async () => {\n      // Effectuer une requête vers l'API avec les coordonnées du point cliqué\n      const response = await axios.get(\"http://localhost:8080/citys\");\n      console.log(response.data);\n      \n    };\n\n    const convertCoordinates = () => {\n      // Vos calculs de conversion ici\n      console.log(\"Latitude convertie : ...\");\n      console.log(\"Longitude convertie : ...\");\n    };\n\n\n    //getDimensions();\n    // Ajouter un écouteur de clic sur la carte\n    carteRef.current.addEventListener(\"click\", fetchData);\n\n    convertCoordinates();\n\n    return ()=>{\n      carteRef.current.removeEventListener(\"click\",fetchData);\n    \n    };\n  }, []);\n\n  return (\n    <div>\n      <img ref={carteRef} src={carte} alt=\"Carte\"/>\n    </div>\n  );\n}\n\nexport default App;\n*/"],"mappings":";AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,GAAG,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,GAAG,SAASJ,KAAK,CAACK,SAAS,CAAC;EAChCC,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IAAC,KAMfC,gBAAgB,GAAG,CAACC,GAAG,EAAEC,GAAG,KAAK;MAC/BC,KAAK,CAAE,6BAA4B,CAAC,CACjCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;QACZ,IAAI,CAACC,QAAQ,CAAC;UAAEC,WAAW,EAAEF;QAAK,CAAC,CAAC;MACtC,CAAC,CAAC,CACDG,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,0DAA0D,EAAEA,KAAK,CAAC,CAAC;IACrG,CAAC;IAZC,IAAI,CAACE,KAAK,GAAG;MACXJ,WAAW,EAAE;IACf,CAAC;EACH;EAWAK,MAAMA,CAAA,EAAG;IACP,oBACEnB,OAAA;MAAAoB,QAAA,gBACEpB,OAAA;QAAAoB,QAAA,EAAI;MAA2B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpCxB,OAAA,CAACF,GAAG;QAAC2B,OAAO,EAAE,IAAI,CAACpB;MAAiB;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEpC,CAAC;EAEV;AACF;AAEA,eAAevB,GAAG;;AA0Cl},"metadata":{},"sourceType":"module","externalDependencies":[]}