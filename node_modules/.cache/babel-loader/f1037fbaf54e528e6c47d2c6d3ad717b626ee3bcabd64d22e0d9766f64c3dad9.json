{"ast":null,"code":"var _jsxFileName = \"/home/kenneth/Bureau/carte-projet/src/components/Map.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Map({\n  carte,\n  fetchData,\n  setSelectedCity\n}) {\n  _s();\n  const handleMapClick = event => {\n    const rect = event.target.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n    fetchData(x, y);\n  };\n  const [isHovered, setIsHovered] = useState(false);\n  const handleMouseOver = cityName => {\n    setIsHovered(cityName);\n  };\n  const handleMouseOut = () => {\n    setIsHovered(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: carte,\n      alt: \"Carte de France\",\n      style: {\n        width: \"50%\",\n        height: \"auto\",\n        float: \"left\"\n      },\n      onClick: handleMapClick,\n      onMouseOver: () => handleMouseOver(\"Paris\"),\n      onMouseOut: handleMouseOut\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), hoveredCity && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: hoveredCity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_s(Map, \"FPQn8a98tPjpohC7NUYORQR8GJE=\");\n_c = Map;\nexport default Map;\n\n/*import React from \"react\";\nimport carte from \"../carte.png\"; // Importez l'image de la carte\n\nfunction Map({ cities, setSelectedCity }) {\n  // Fonction pour gérer le clic sur la carte\n  const handleMapClick = (event) => {\n    const rect = event.target.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n\n    // Recherche de la ville cliquée\n    const clickedCity = cities.find(city => {\n      const { x: cityX, y: cityY } = city;\n      return Math.abs(x - cityX) <= 5 && Math.abs(y - cityY) <= 5;\n    });\n\n    // Sélectionne la ville si elle a été trouvée\n    if (clickedCity) {\n      setSelectedCity(clickedCity);\n    }\n  };\n\n  return (\n    <div style={{ position: \"relative\" }}>\n      {/* Image de la carte *\n      <img\n        src={carte}\n        alt=\"Carte de France\"\n        style={{ width: \"100%\", height: \"auto\" }}\n        onClick={handleMapClick} // Ajoutez un gestionnaire de clic sur l'image\n      />\n      \n      {/* Marqueurs de ville \n      {cities.map(city => (\n        <div\n          key={city.id}\n          style={{\n            position: \"absolute\",\n            left: city.x - 5, // Décalage pour centrer le marqueur sur les coordonnées de la ville\n            top: city.y - 5, // Décalage pour centrer le marqueur sur les coordonnées de la ville\n            width: \"10px\",\n            height: \"10px\",\n            backgroundColor: \"red\",\n            borderRadius: \"100%\",\n            cursor: \"pointer\"\n          }}\n          onClick={() => setSelectedCity(city)}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default Map;*/\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Map","carte","fetchData","setSelectedCity","_s","handleMapClick","event","rect","target","getBoundingClientRect","x","clientX","left","y","clientY","top","isHovered","setIsHovered","useState","handleMouseOver","cityName","handleMouseOut","style","position","children","src","alt","width","height","float","onClick","onMouseOver","onMouseOut","fileName","_jsxFileName","lineNumber","columnNumber","hoveredCity","_c","$RefreshReg$"],"sources":["/home/kenneth/Bureau/carte-projet/src/components/Map.js"],"sourcesContent":["\nimport React from 'react';\n\nfunction Map({ carte, fetchData, setSelectedCity }) {\n  const handleMapClick = (event) => {\n    const rect = event.target.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n    fetchData(x, y);\n  };\n\n\n\n\n  const [isHovered, setIsHovered] = useState(false);\n\n    const handleMouseOver = (cityName) => {\n      setIsHovered(cityName);\n    };\n  \n    const handleMouseOut = () => {\n      setIsHovered(null);\n    };\n\n  return (\n    <div style={{ position: \"relative\" }}>\n      <img \n      src={carte} alt=\"Carte de France\" \n      style={{ width: \"50%\", height: \"auto\", float:\"left\" }} \n      onClick={handleMapClick} \n      onMouseOver={() => handleMouseOver(\"Paris\")}\n      onMouseOut={handleMouseOut}\n      />\n      {hoveredCity && <p>{hoveredCity}</p>}\n    </div>\n  );\n}\n\nexport default Map;\n\n\n\n/*import React from \"react\";\nimport carte from \"../carte.png\"; // Importez l'image de la carte\n\nfunction Map({ cities, setSelectedCity }) {\n  // Fonction pour gérer le clic sur la carte\n  const handleMapClick = (event) => {\n    const rect = event.target.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n\n    // Recherche de la ville cliquée\n    const clickedCity = cities.find(city => {\n      const { x: cityX, y: cityY } = city;\n      return Math.abs(x - cityX) <= 5 && Math.abs(y - cityY) <= 5;\n    });\n\n    // Sélectionne la ville si elle a été trouvée\n    if (clickedCity) {\n      setSelectedCity(clickedCity);\n    }\n  };\n\n  return (\n    <div style={{ position: \"relative\" }}>\n      {/* Image de la carte *\n      <img\n        src={carte}\n        alt=\"Carte de France\"\n        style={{ width: \"100%\", height: \"auto\" }}\n        onClick={handleMapClick} // Ajoutez un gestionnaire de clic sur l'image\n      />\n      \n      {/* Marqueurs de ville \n      {cities.map(city => (\n        <div\n          key={city.id}\n          style={{\n            position: \"absolute\",\n            left: city.x - 5, // Décalage pour centrer le marqueur sur les coordonnées de la ville\n            top: city.y - 5, // Décalage pour centrer le marqueur sur les coordonnées de la ville\n            width: \"10px\",\n            height: \"10px\",\n            backgroundColor: \"red\",\n            borderRadius: \"100%\",\n            cursor: \"pointer\"\n          }}\n          onClick={() => setSelectedCity(city)}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default Map;*/\n"],"mappings":";;AACA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,GAAGA,CAAC;EAAEC,KAAK;EAAEC,SAAS;EAAEC;AAAgB,CAAC,EAAE;EAAAC,EAAA;EAClD,MAAMC,cAAc,GAAIC,KAAK,IAAK;IAChC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,qBAAqB,CAAC,CAAC;IACjD,MAAMC,CAAC,GAAGJ,KAAK,CAACK,OAAO,GAAGJ,IAAI,CAACK,IAAI;IACnC,MAAMC,CAAC,GAAGP,KAAK,CAACQ,OAAO,GAAGP,IAAI,CAACQ,GAAG;IAClCb,SAAS,CAACQ,CAAC,EAAEG,CAAC,CAAC;EACjB,CAAC;EAKD,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAGC,QAAQ,CAAC,KAAK,CAAC;EAE/C,MAAMC,eAAe,GAAIC,QAAQ,IAAK;IACpCH,YAAY,CAACG,QAAQ,CAAC;EACxB,CAAC;EAED,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3BJ,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAEH,oBACElB,OAAA;IAAKuB,KAAK,EAAE;MAAEC,QAAQ,EAAE;IAAW,CAAE;IAAAC,QAAA,gBACnCzB,OAAA;MACA0B,GAAG,EAAExB,KAAM;MAACyB,GAAG,EAAC,iBAAiB;MACjCJ,KAAK,EAAE;QAAEK,KAAK,EAAE,KAAK;QAAEC,MAAM,EAAE,MAAM;QAAEC,KAAK,EAAC;MAAO,CAAE;MACtDC,OAAO,EAAEzB,cAAe;MACxB0B,WAAW,EAAEA,CAAA,KAAMZ,eAAe,CAAC,OAAO,CAAE;MAC5Ca,UAAU,EAAEX;IAAe;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC,EACDC,WAAW,iBAAItC,OAAA;MAAAyB,QAAA,EAAIa;IAAW;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjC,CAAC;AAEV;AAAChC,EAAA,CAjCQJ,GAAG;AAAAsC,EAAA,GAAHtC,GAAG;AAmCZ,eAAeA,GAAG;;AAIlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArDA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}